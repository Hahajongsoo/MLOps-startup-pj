# This example demonstrates the 'resource' template type, which provides a
# convenient way to create/update/delete any type of kubernetes resources
# in a workflow. The resource template type accepts any k8s manifest
# (including CRDs) and can perform any kubectl action against it (e.g. create,
# apply, delete, patch).
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: katib-experiment-
spec:
  entrypoint: katib-experiment
  templates:
    - name: katib-experiment
      resource:
        action: apply
        # successCondition and failureCondition are optional expressions which are
        # evaluated upon every update of the resource. If failureCondition is ever
        # evaluated to true, the step is considered failed. Likewise, if successCondition
        # is ever evaluated to true the step is considered successful. It uses kubernetes
        # label selection syntax and can be applied against any field of the resource
        # (not just labels). Multiple AND conditions can be represented by comma
        # delimited expressions. For more details, see:
        # https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
        successCondition: status.trialsSucceeded>=3
        manifest: |
          apiVersion: kubeflow.org/v1beta1
          kind: Experiment
          metadata:
            name: random1
          spec:
            objective:
              type: maximize
              goal: 0.99
              objectiveMetricName: Validation-accuracy
              additionalMetricNames:
                - Train-accuracy
            algorithm:
              algorithmName: random
            parallelTrialCount: 3
            maxTrialCount: 3
            maxFailedTrialCount: 3
            parameters:
              - name: lr
                parameterType: double
                feasibleSpace:
                  min: "0.01"
                  max: "0.03"
              - name: num-layers
                parameterType: int
                feasibleSpace:
                  min: "2"
                  max: "5"
              - name: optimizer
                parameterType: categorical
                feasibleSpace:
                  list:
                    - sgd
                    - adam
                    - ftrl
            trialTemplate:
              primaryContainerName: training-container
              trialParameters:
                - name: learningRate
                  description: Learning rate for the training model
                  reference: lr
                - name: numberLayers
                  description: Number of training model layers
                  reference: num-layers
                - name: optimizer
                  description: Training model optimizer (sdg, adam or ftrl)
                  reference: optimizer
              trialSpec:
                apiVersion: batch/v1
                kind: Job
                spec:
                  template:
                    metadata:
                      annotations:
                        sidecar.istio.io/inject: "false"
                    spec:
                      containers:
                        - name: training-container
                          image: docker.io/kubeflowkatib/mxnet-mnist:latest
                          command:
                            - "python3"
                            - "/opt/mxnet-mnist/mnist.py"
                            - "--batch-size=64"
                            - "--lr=${trialParameters.learningRate}"
                            - "--num-layers=${trialParameters.numberLayers}"
                            - "--optimizer=${trialParameters.optimizer}"
                      restartPolicy: Never
      # Resource templates can have output parameters extracted from fields of the
      # resource. Two techniques are provided: jsonpath and a jq filter.
      outputs:
        parameters:
          # job-name is extracted using a jsonPath expression and is equivalent to:
          # `kubectl get job <jobname> -o jsonpath='{.metadata.name}'`
          - name: experiment-name
            valueFrom:
              jsonPath: "{.metadata.name}"
          # job-obj is extracted using a jq filter and is equivalent to:
          # `kubectl get job <jobname> -o json | jq -c '.'
          # which returns the entire job object in json format
          - name: experiment-obj
            valueFrom:
              jqFilter: "."
          - name: status-conditions
            valueFrom:
              jsonPath: "{.status.conditions}"
